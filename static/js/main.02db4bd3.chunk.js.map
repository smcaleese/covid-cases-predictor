{"version":3,"sources":["CustomTooltip.js","Chart.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["CustomTooltip","payload","label","active","colors","colorMap","i","length","value","sortedKeys","Object","keys","sort","a","b","sortedValues","key","push","listElements","newElement","style","color","toLocaleString","className","Chart","getCases","currentCases","avgDailyGrowthRate","forecastNumDays","casesArr","cases","Math","pow","round","dateToday","Date","daysArr","dayOfMonth","getDate","monthNum","getMonth","newDate","toString","setDate","tickItem","inputBoxes","this","props","dateArr","getDates","arrOfArrays","currentCasesKey","avgDailyGrowthRateKey","nextCasesArr","data","newElementCopy","keyArrIndex","lineArr","line","connectNulls","type","strokeWidth","dataKey","stroke","fill","animationDuration","graphWidth","width","height","margin","top","right","left","bottom","strokeDasharray","tick","fontFamily","tickCount","tickFormatter","formatYAxis","content","wrapperStyle","font","PureComponent","InputBox","backgroundColor","name","onChange","handleInputChange","currentCasesValue","avgDailyGrowthRateValue","forecastNumDaysKey","forecastNumDaysValue","InputContainer","inputBoxComponents","inputBox","id","inputBoxListItems","map","onClick","handleAddBoxButtonPress","handleSubtractBoxButtonPress","App","event","target","isNaN","newinputBoxes","state","slice","parseInt","setState","inputBoxArrLen","firstKey","secondKey","newBox","concat","currentCases0","avgDailyGrowthRate0","currentCases1","avgDailyGrowthRate1","Input","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02db4bd3.chunk.js","sourcesContent":["import React from 'react';\n\n// function creates tooltip and orders colors and values in the tooltip so that each color and value is nearest to its graph\nexport default function CustomTooltip({ payload, label, active }) {\n  if (active) {\n\t\t// red -> orange -> blue -> green -> violet\n\t\tconst colors = [\"#e54304\", \"#f47100\", \"#93c400\", \"#179b6a\", \"#3f8487\", \"#1586f3\", \"#a885ff\", \"#e985ff\", \"#fd008a\", \"#000000\", \"#8c944b\", \"#53a367\"];\n\n\t\t// create a mapping of colors to values (cases)\n\t\tlet colorMap = {};\n\t\tfor(let i = 0; i < payload.length; i++) {\n\t\t\t\tcolorMap[colors[i]] = payload[i].value; \t// color : value\n\t\t}\n\n\t\t// sort map by values\n\t\tlet sortedKeys = Object.keys(colorMap).sort(function(a, b) { return colorMap[b] - colorMap[a] })\n\n\t\t// get sorted values from sorted keys\n\t\tlet sortedValues = [];\n\t\tfor(const key of sortedKeys) {\n\t\t\tsortedValues.push(colorMap[key]);\n\t\t}\n\n\t\t// write values in descending order\n\t\tlet listElements = [];\n\t\tfor(let i = 0; i < sortedKeys.length; i++) {\n\t\t\tlet newElement = <li key={ i }>\n\t\t\t\t\t\t\t\t<div style={{ color: sortedKeys[i] }}>cases</div>\n\t\t\t\t\t\t\t\t<div>{ colorMap[sortedKeys[i]].toLocaleString() }</div>\n\t\t\t\t\t\t\t</li>;\n\t\t\tlistElements.push(newElement);\n\t\t}\n\n    return (\n      <div className=\"custom-tooltip\">\n\t\t\t\t<p className=\"tooltip-label\">{`${label}`}</p>\n\t\t\t\t<ul className=\"tooltip-ul\">\n\t\t\t\t\t{ listElements }\n\t\t\t\t</ul>\n      </div>\n    );\n  }\n\n  return null;\n}","import React, { PureComponent } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nclass Chart extends PureComponent {\n\tgetDates(forecastNumDays) {\n\t\tlet dateToday = new Date();\n\t\tlet daysArr = [];\n\n\t\tfor(let i = 0; i < forecastNumDays; i++) {\n\t\t\tlet dayOfMonth = dateToday.getDate();\n\t\t\tlet monthNum = dateToday.getMonth();\n\n\t\t\tlet newDate = dayOfMonth.toString() + \"/\" + (monthNum + 1).toString();\n\t\t\tdaysArr.push(newDate);\n\n\t\t\tdateToday.setDate(dayOfMonth + 1); // automatically changes dayOfMonth to 1 and month to next month when end of month reached\n\t\t}\n\t\treturn daysArr;\n\t}\n\n  getCases = (currentCases, avgDailyGrowthRate, forecastNumDays) => {\n    let casesArr = []; // cases per day\n\n    for(let i = 0; i < forecastNumDays; i++) {\n      let cases = currentCases * Math.pow((1 + (avgDailyGrowthRate / 100)), i) // cases for a given day\n      cases = Math.round(cases);\n      casesArr.push(cases);\n    }\n    return casesArr;\n  }\n\n  // adds commas to numbers in y-axis\n  formatYAxis(tickItem) {\n\treturn tickItem.toLocaleString();\n  }\n\n  render() {\n    let inputBoxes = this.props.inputBoxes; // array of objects\n\n    \tlet forecastNumDays = inputBoxes[0][\"forecastNumDays\"];\n\t\tconst dateArr = this.getDates(forecastNumDays);\n\n\t\tlet newElement = {};\n\t\tnewElement[\"dates\"] = [];\n\n\t\tlet arrOfArrays = [];\n\t\tarrOfArrays.push(dateArr);\n\n\t\t// loop through inputBoxes, get cases arrays and create newElement template\n\t\tlet cases = \"cases\";\n\t\tfor(let i = 0; i < inputBoxes.length; i++) {\n\t\t\tlet currentCasesKey = \"currentCases\" + i.toString();\n    \tlet avgDailyGrowthRateKey = \"avgDailyGrowthRate\" + i.toString();\n\n\t\t\tlet nextCasesArr = this.getCases(inputBoxes[i][currentCasesKey], inputBoxes[i][avgDailyGrowthRateKey], forecastNumDays);\n\t\t\tarrOfArrays.push(nextCasesArr);\n\t\t\tnewElement[cases + (i + 1).toString() ] = []; \t// add cases key\n\t\t}\n\n\t\t// template: newElement = {dates: [], cases1: [], cases2: [], ...};\n\t\t// arrOfArrays = [ [dateArr], [cases1], [cases2], [cases3] ];\n\n\t\tlet data = [];\n\t\tconst keys = Object.keys(newElement);\n\n\t\t// i loops 'down' and adds new newElements to data for every date while keyArrIndex loops 'across' and fills a newElement using arrOfArrays\n\t\tfor(let i = 0; i < dateArr.length; i++) {\n\t\t\tlet newElementCopy = {...newElement}; // create shallow copy\n\t\t\tlet keyArrIndex = 0;\n\t\t\tfor(const key of keys) {\n\t\t\t\tnewElementCopy[key] = arrOfArrays[keyArrIndex][i];\n\t\t\t\tkeyArrIndex++;\n\t\t\t}\n\t\t\tdata.push(newElementCopy);\n\t\t}\n\n    \t// example data:\n    \t// [{ dates: 2/3, cases1: 100, cases2: 50 },\n    \t// { dates: 3/3, cases1: 200, cases2: 100 }]\n\n\t    // red -> orange -> blue -> green -> violet\n\t\tconst colors = [\"#e54304\", \"#f47100\", \"#93c400\", \"#179b6a\", \"#3f8487\", \"#1586f3\", \"#a885ff\", \"#e985ff\", \"#fd008a\", \"#808080\", \"#8c944b\", \"#53a367\"];\n\n\t\t// create a line for every cases key (index 1 to n)\n\t\tlet lineArr = [];\n    \tfor(let i = 1; i < keys.length; i++) {\n      \t\tconst line = <Line connectNulls key={ i } type=\"monotone\" strokeWidth=\"2\"\n\t\t\t\tdataKey={ keys[i] } stroke={ colors[i - 1] } fill={ colors[(i - 1)] } animationDuration={ 100 } />;\n      \t\tlineArr.push(line);\n\t\t}\n\n\t\tlet xAxisTicks = dateArr.length;\n\t\tlet graphWidth = (xAxisTicks / 30) * 1800;\n\n    \treturn (\n      \t\t<div>\n        \t<LineChart\n          \t\twidth={ graphWidth }\n          \t\theight={ 500 }\n          \t\tdata={ data }\n         \t \tmargin={{ top: 20, right: 10, left: 10, bottom: 0 }}\n       \t \t>\n          \t<CartesianGrid strokeDasharray=\"5 5\" />\n          \t<XAxis dataKey=\"dates\" tick={{ fontFamily: 'Helvetica' }} tickCount={ 100 } />\n          \t<YAxis tick={{ fontFamily: 'Helvetica' }} tickFormatter={ this.formatYAxis } />\n          \t<Tooltip content={ <CustomTooltip /> } animationDuration={ 50 } wrapperStyle={{ font: '1rem Helvetica, Arial' }} />\n          \t{ lineArr }\n        \t</LineChart>\n    \t\t</div>\n    \t);\n  \t}\n}\n\nexport default Chart;","import React from 'react';\n\nfunction InputBox(props) {\n    return (\n      <div className=\"input-div\" style={{ backgroundColor: props.backgroundColor }}>\n        <div className=\"input-section\">\n          <p className=\"input-p\">Current Cases</p>\n          <input className=\"input-box\" type=\"number\" name={ props.currentCasesKey } onChange={ props.handleInputChange } value={ props.currentCasesValue } />\n        </div>\n        <div className=\"input-section\">\n          <p className=\"input-p\">Average Daily Growth Rate (%)</p>\n          <input className=\"input-box\" type=\"number\" name={ props.avgDailyGrowthRateKey } onChange={ props.handleInputChange } value={ props.avgDailyGrowthRateValue } />\n        </div>\n        <div className=\"input-section\">\n          <p className=\"input-p\">Forecase Days</p>\n          <input className=\"input-box\" type=\"number\" name={ props.forecastNumDaysKey } onChange={ props.handleInputChange } value={ props.forecastNumDaysValue } />\n        </div>\n      </div>\n    );\n}\n\nfunction InputContainer(props) {\n  let inputBoxes = props.inputBoxes; // array of objects\n  const colors = [\"#e54304\", \"#f47100\", \"#93c400\", \"#179b6a\", \"#3f8487\", \"#1586f3\", \"#a885ff\", \"#e985ff\", \"#fd008a\", \"#808080\", \"#8c944b\", \"#53a367\"];\n\n  // convert array of objects in inputBoxes to array of InputBox components\n  let inputBoxComponents = [];\n  for(let i = 0; i < inputBoxes.length; i++) {\n    let currentCasesKey = \"currentCases\" + i.toString();\n    let avgDailyGrowthRateKey = \"avgDailyGrowthRate\" + i.toString();\n    let forecastNumDaysKey = \"forecastNumDays\";\n\n    // create an InputBox element from an object\n    let inputBox = <InputBox\n                    id={ i }\n                    backgroundColor={ colors[i] }\n                    handleInputChange={ props.handleInputChange }\n\n                    currentCasesKey={ currentCasesKey }\n                    avgDailyGrowthRateKey={ avgDailyGrowthRateKey }\n                    forecastNumDaysKey={ forecastNumDaysKey }\n\n                    currentCasesValue={ inputBoxes[i][currentCasesKey] }\n                    avgDailyGrowthRateValue={ inputBoxes[i][avgDailyGrowthRateKey] }\n                    forecastNumDaysValue={ inputBoxes[0][forecastNumDaysKey] }\n                   />;\n    inputBoxComponents.push(inputBox);\n  }\n\n  // change list of divs to list of <li>'s\n  const inputBoxListItems = inputBoxComponents.map((inputBox) =>\n    <li key={ inputBox.props.id }> { inputBox } </li>\n  );\n\n  return (\n    <div>\n      <ul className=\"input-ul\">\n        <li>{ inputBoxListItems }</li>\n        <li className=\"input-box-button-li\">\n          <span className=\"input-box-buttons\">\n            <button onClick={ props.handleAddBoxButtonPress } className=\"input-box-button\"> &#43; </button>\n            <button onClick={ props.handleSubtractBoxButtonPress } className=\"input-box-button\"> &minus; </button>\n          </span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default InputContainer;","//import React from 'react';\nimport './App.css';\nimport Chart from './Chart';\nimport InputContainer from './Input';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputBoxes: [\n        {\n          currentCases0: 100,\n          avgDailyGrowthRate0: 20,\n          forecastNumDays: 30,\n        },\n        {\n          currentCases1: 200,\n          avgDailyGrowthRate1: 20,\n        },\n      ]\n    };\n  }\n\n  handleInputChange = (event) => {\n    let name = event.target.name;\n    let value = event.target.value;\n\n    // if input is empty\n    if(isNaN(value)) {\n      value = 0;\n    }\n\n    let newinputBoxes = this.state.inputBoxes.slice();\n    let key = name.slice(-1); // eg. currentCases0 -> 0\n    // for forecastNumDays, use any index.\n    if(isNaN(key)) {\n      key = 0;\n    }\n\n    value = parseInt(value);\n    newinputBoxes[key][name] = value;\n    this.setState({ inputBoxes: newinputBoxes });\n  }\n\n  handleAddBoxButtonPress = (event) => {\n    let inputBoxArrLen = this.state.inputBoxes.length.toString();\n\n    let firstKey = \"currentCases\" + inputBoxArrLen;\n    let secondKey = \"avgDailyGrowthRate\" + inputBoxArrLen;\n    let thirdKey = \"forecastNumDays\";\n    let newBox = {\n      [firstKey]: 100 + (parseInt(inputBoxArrLen) * 100), // slightly increase value for each new input box to make graph look nicer\n      [secondKey]: 20,\n      [thirdKey]: 15\n    };\n\n    if(this.state.inputBoxes.length < 12) {\n      this.setState(state => ({\n        inputBoxes: state.inputBoxes.concat(newBox)\n      }));\n    }\n  }\n\n  handleSubtractBoxButtonPress = (event) => {\n    if(this.state.inputBoxes.length > 1) {\n      this.setState(state => ({\n        inputBoxes: state.inputBoxes.slice(0, this.state.inputBoxes.length - 1) // remove last box\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <div>\n      <InputContainer\n        handleInputChange={ this.handleInputChange }\n        inputBoxes={ this.state.inputBoxes }\n        handleAddBoxButtonPress={ this.handleAddBoxButtonPress }\n        handleSubtractBoxButtonPress={ this.handleSubtractBoxButtonPress }\n      />\n      <Chart inputBoxes={ this.state.inputBoxes } />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}