{"version":3,"sources":["Chart.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["Chart","getDates","numDays","dateToday","Date","toISOString","slice","dayOfMonth","parseInt","daysArr","monthNum","i","newDate","toString","push","getCases","currCases","avgDailyGrowthRate","casesArr","cases","Math","pow","round","console","log","inputBoxes","this","props","dateArr","newElement","name","length","casesArrOfArrays","numCaseColumns","currCasesKey","Object","keys","avgDailyGrowthRateKey","data","newElementCopy","keyArrIndex","graphWidth","keyArr","key","splice","lineArr","line","connectNulls","type","dataKey","stroke","fill","animationDuration","width","height","margin","top","right","left","bottom","strokeDasharray","tickCount","wrapperStyle","font","PureComponent","InputBox","className","currentCasesName","onChange","handleChange","value","currentCasesValue","avgDailyGrowthRateName","avgDailyGrowthRateValue","forecastNumDaysName","forecastNumDaysValue","InputContainer","inputBoxElements","firstKey","secondKey","thirdKey","inputBox","inputBoxListItems","map","onClick","handlePositiveButtonPress","handleNegativeButtonPress","App","handleInputChange","event","target","v","stateCopy","assign","state","isNaN","setState","handleAddBoxButton","currArrLen","defaultBox","concat","handleSubtractBoxButton","currentCases0","avgDailyGrowthRate0","forecastNumDays","currentCases1","avgDailyGrowthRate1","Input","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f140d614.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,\n} from 'recharts';\n\nclass Chart extends PureComponent {\n  getDates = (numDays) => {\n    let dateToday = new Date().toISOString().slice(0, 10);\n    let dayOfMonth = parseInt(dateToday.slice(8, 10));\n\n    let daysArr = []; // dates from today\n    let monthNum = parseInt(dateToday.slice(5, 7));\n    for(let i = 0; i < numDays; i++) {\n      if(dayOfMonth % 30 === 1) { // assume 30 days in a month for now\n        monthNum++;\n        dayOfMonth = 1;\n      }\n      let newDate = dayOfMonth.toString() + \"/\" + monthNum.toString();\n      daysArr.push(newDate);\n      dayOfMonth++;\n    }\n    return daysArr;\n  }\n\n  getCases = (currCases, avgDailyGrowthRate, numDays) => {\n    let casesArr = []; // cases per day\n\n    for(let i = 0; i < numDays; i++) {\n      let cases = currCases * Math.pow((1 + (avgDailyGrowthRate / 100)), i) // cases for a given day\n      cases = Math.round(cases);\n      casesArr.push(cases);\n    }\n    console.log(casesArr);\n    return casesArr;\n  }\n\n    render() {\n      let inputBoxes = this.props.inputBoxes; // array of objects\n\n      let numDays = inputBoxes[0][\"forecastNumDays\"];\n      const dateArr = this.getDates(numDays);\n      console.log(\"numDays:\", numDays);\n\n      var newElement = { name: [] };\n\n      // create template by adding columns: newElement\n      for(let i = 1; i <= inputBoxes.length; i++) {\n        newElement[\"cases\" + i.toString()] = [];\n      }\n\n      // now newElement looks something like: newElement = { name: [], cases1: [], cases2: [] }\n\n      // call getCases() for every element in inputBoxes and return an array of case data based on those inputs\n      let casesArrOfArrays = [];\n      casesArrOfArrays.push(dateArr);\n      console.log(\"dateArr\", dateArr);\n\n      let numCaseColumns = inputBoxes.length;\n      for(let i = 0; i < numCaseColumns; i++) {\n        // create new unique cases array based on each input box\n        let currCasesKey = Object.keys(inputBoxes[i])[0];\n        let avgDailyGrowthRateKey = Object.keys(inputBoxes[i])[1];\n        console.log(\"value2:\", numDays);\n        let casesArr = this.getCases(inputBoxes[i][currCasesKey], inputBoxes[i][avgDailyGrowthRateKey], numDays);\n        casesArrOfArrays.push(casesArr);\n      }\n\n      console.log(\"x:\", casesArrOfArrays);\n\n      // array of arrays\n      // [dateArr, cases1, cases2, ...]\n\n      // populate empty columns with data\n      let data = [];\n\n      // let newElement = { name: casesArrOfArrays[0][i], cases1: casesArrOfArrays[1][i], cases2: casesArrOfArrays[2][i], ...}\n\n      const keys = Object.keys(newElement);\n      // create and push a new element for each date\n      // i loops 'down' while keyArrIndex loops 'accross'\n      for(let i = 0; i < casesArrOfArrays[0].length; i++) {\n        let newElementCopy = {...newElement}; // create shallow copy of object otherwise all elements in data will be the same\n        let keyArrIndex = 0;\n        for(const key of keys) {\n          newElementCopy[key] = casesArrOfArrays[keyArrIndex][i];\n          keyArrIndex++;\n        }\n        data.push(newElementCopy);\n      }\n\n\n\n      // example data:\n      // { name: 2/3, cases1: 100, cases2: 50 }\n      // { name: 3/3, cases1: 200, cases2: 100 }\n\n      let xAxisTicks = dateArr.length;\n      let graphWidth = (xAxisTicks / 30) * 1800;\n\n      // get keys for dataKey\n      let keyArr = [];\n      for(const key of keys) {\n        keyArr.push(key);\n      }\n      keyArr = keyArr.splice(1) // remove dates key\n      console.log(\"data:\", keyArr);\n\n      let lineArr = [];\n      // add lines to lineArr\n      for(let i = 0; i < keyArr.length; i++) {\n        const line = <Line connectNulls type=\"monotone\" dataKey={ keyArr[i] } stroke=\"#e32619\" fill=\"#e32619\" animationDuration={100} />;\n        lineArr.push(line);\n      }\n      console.log(\"lines:\", lineArr);\n\n      return (\n        <div>\n          <LineChart\n            width={graphWidth}\n            height={500}\n            data={data}\n            margin={{\n              top: 20, right: 10, left: 10, bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"name\" tickCount={100} />\n            <YAxis />\n            <Tooltip animationDuration={50} wrapperStyle={{ font: '16px Arial' }} />\n            { lineArr }\n          </LineChart>\n      </div>\n      );\n    }\n  }\n\n  export default Chart;","import React from 'react';\n\nfunction InputBox(props) {\n    return (\n      <div className=\"input-div\">\n        <p className=\"input-p\">Current Cases</p>\n        <input className=\"main-input\" type=\"text\" name={ props.currentCasesName } onChange={ props.handleChange } value={ props.currentCasesValue } />\n        <p className=\"input-p\">Average Daily Growth Rate (%)</p>\n        <input className=\"main-input\" type=\"text\" name={ props.avgDailyGrowthRateName } onChange={ props.handleChange } value={ props.avgDailyGrowthRateValue } />\n        <p className=\"input-p\">Forecase Days</p>\n        <input className=\"main-input\" type=\"text\" name={ props.forecastNumDaysName } onChange={ props.handleChange } value={ props.forecastNumDaysValue } />\n      </div>\n    );\n}\n\nfunction InputContainer(props) {\n  let inputBoxes = props.inputBoxes; // array of objects\n\n  // convert array of objects to array of InputBoxes\n  let inputBoxElements = [];\n  for(let i = 0; i < inputBoxes.length; i++) {\n    let firstKey = Object.keys(inputBoxes[i])[0];\n    let secondKey = Object.keys(inputBoxes[i])[1];\n    let thirdKey = Object.keys(inputBoxes[i])[2];\n    console.log(\"keys:\");\n    console.log(\":\", firstKey);\n    console.log(\":\", secondKey);\n    console.log(\":\", thirdKey);\n    console.log(\"currentCasesName\", inputBoxes[i][firstKey]);\n    console.log(\"avgDailyGrowthRate:\", inputBoxes[i][secondKey]);\n    console.log(\"forecastNumDaysName:\", inputBoxes[i][thirdKey]);\n    console.log(\"sep\");\n    // create an InputBox element from an object\n    let inputBox = <InputBox\n                    currentCasesName={ firstKey }\n                    avgDailyGrowthRateName={ secondKey }\n                    forecastNumDaysName={ thirdKey }\n\n                    currentCasesValue={ inputBoxes[i][firstKey] }\n                    avgDailyGrowthRateValue={ inputBoxes[i][secondKey] }\n                    forecastNumDaysValue={ inputBoxes[0][\"forecastNumDays\"] }\n                    handleChange={ props.handleChange }\n                   />;\n    inputBoxElements.push(inputBox);\n  }\n\n  // change list of divs to list of <li>'s\n  const inputBoxListItems = inputBoxElements.map((inputBox) =>\n    <li>{ inputBox }</li>\n  );\n\n  return (\n    <div>\n      <ul className=\"input-ul\">\n        { inputBoxListItems }\n        <button onClick={ props.handlePositiveButtonPress } className=\"input-box-button\"> &#43; </button>\n        <button onClick={ props.handleNegativeButtonPress } className=\"input-box-button\"> &minus; </button>\n      </ul>\n    </div>\n  );\n}\n\nexport default InputContainer;","//import React from 'react';\nimport './App.css';\nimport Chart from './Chart';\nimport InputContainer from './Input';\nimport React from 'react';\n\n// TODO:\n// deploy current version to heroku\n// play game\n\n// change color for each graph?\n// make app more mobile-friendly\n// add social distancing as an input\n// make UI more impressive\n// refactor / simplify code\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputBoxes: [\n        {\n          currentCases0: 100,\n          avgDailyGrowthRate0: 20,\n          forecastNumDays: 15,\n        },\n        {\n          currentCases1: 200,\n          avgDailyGrowthRate1: 20,\n          forecastNumDays: 15,\n        }\n      ]\n    };\n  }\n\n  handleInputChange = (event) => {\n    let name = event.target.name;\n    let value = event.target.value;\n    console.log(name, value);\n    let v = 0;\n    if(value !== \"\") {\n      v = parseInt(value);\n    }\n    else {\n      v = 0;\n    }\n    console.log(\"v\", v, typeof v);\n    //console.log(\"change detected!\");\n\n    let stateCopy = Object.assign({}, this.state);\n    stateCopy.inputBoxes = stateCopy.inputBoxes.slice();\n    let key = name.slice(-1); // number at end of object key, key for inputBoxes array\n    //console.log(\"key\", key);\n\n    if(isNaN(key)) {\n      // for forecast days change\n      key = 0;\n    }\n\n    stateCopy.inputBoxes[key] = Object.assign({}, stateCopy.inputBoxes[key]);\n    stateCopy.inputBoxes[key][name] = v;\n    console.log(\"test\", stateCopy.inputBoxes[key][name]);\n    this.setState(stateCopy);\n    console.log(\"state\", this.state);\n  }\n\n  handleAddBoxButton = (event) => {\n    let currArrLen = this.state.inputBoxes.length.toString();\n    let firstKey = \"currentCases\" + currArrLen;\n    let secondKey = \"avgDailyGrowthRate\" + currArrLen;\n    let thirdKey = \"forecastNumDays\";\n\n    let defaultBox = {\n      [firstKey]: 100 + (currArrLen * 10),\n      [secondKey]: 20,\n      [thirdKey]: 15\n    };\n\n    this.setState(state => ({\n      inputBoxes: state.inputBoxes.concat(defaultBox)\n    }));\n    console.log(\"state\", this.state);\n  }\n\n  handleSubtractBoxButton = (event) => {\n    if(this.state.inputBoxes.length > 1) {\n      this.setState(state => ({\n        inputBoxes: state.inputBoxes.slice(0, this.state.inputBoxes.length - 1)\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <div>\n      <InputContainer\n        handleChange={ this.handleInputChange }\n        inputBoxes={ this.state.inputBoxes }\n        handlePositiveButtonPress={ this.handleAddBoxButton }\n        handleNegativeButtonPress={ this.handleSubtractBoxButton }\n      />\n      <Chart inputBoxes={ this.state.inputBoxes } />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}